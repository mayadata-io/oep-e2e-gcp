#!/bin/bash
set -ex

######################
##   Prerequisites  ##
######################

mkdir ~/.kube
cp  .kube/config ~/.kube/config

# Dump cluster state
echo "********************** Dumping node's status **********************"
kubectl get nodes -o wide
echo "********************** Dumping pod's status ***********************"
kubectl get po --all-namespaces -o wide

IP=$(kubectl get node -o wide | awk {'print $7'} | head -n 4 | tail -n 1):30380

# Get DOP URL
URL=http://$(kubectl get node -o wide | awk {'print $7'} | head -n 4 | tail -n 1):30380
echo "URL to access DOP: $URL"

# Create a configmap from URL
kubectl create configmap config --from-literal=url=$URL -n litmus
touch .kube/url
echo $URL > .kube/url

wget https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz

tar -zxvf helm-v2.14.3-linux-amd64.tar.gz

mv linux-amd64/helm /usr/local/bin/helm

echo $HELM_RBAC > HELM_RBAC.yaml

helm init

sleep 45

helm version

job_id=$(echo $CI_JOB_ID)
gittoken=$(echo "$GITHUB_TOKEN")
current_time=$(date)
branch_name=$CI_COMMIT_REF_NAME
test_name="tcid-iudi01"
stage="PROVIDER-INFRA-SETUP"
test_desc="Install DOP using helm with GPD underneath"

######################
##    Deploy DOP    ##
######################

echo "deploying DOP" 

# Clone director-charts-internal repository
git clone https://$username:$password@github.com/mayadata-io/director-charts-internal.git

cd director-charts-internal

# Checkout to dop-e2e branch
git checkout dop-e2e

# Get latest directory of helm chart
REPO=$(cat baseline | awk -F',' 'NR==1{print $3}' | awk -F'=' '{print $2}')
TAG=$(cat baseline | awk -F',' 'NR==1{print $NF}' | awk -F'=' '{print $2}')

cd $REPO-$TAG

# Apply docker secret
kubectl apply -f docker-secret.yaml

# Create secret having maya-init repo access
kubectl create secret docker-registry dop-secret --docker-username=$DOCKER_USERNAME --docker-password=$DOCKER_PASSWORD

# Create clusterrolebinding
kubectl create clusterrolebinding kube-admin --clusterrole cluster-admin --serviceaccount=kube-system:default

# Replace mayadataurl with DOP URL
sed 's|url: mayadataurl|url: '${IP}'|' -i ./values.yaml
cat values.yaml

# Apply helm chart
helm install --name dop .

kubectl get po

# Cloning oep-e2e repository which contains all the test scripts
git clone https://$username:$password@github.com/mayadata-io/oep-e2e.git
# Setup litmus on the cluster
kubectl apply -f oep-e2e/litmus/prerequisite/rbac.yaml
kubectl apply -f oep-e2e/litmus/prerequisite/crds.yaml
# creating docker secret 
kubectl apply -f oep-e2e/litmus/prerequisite/docker-secret.yml -n litmus
## Add label to node
node_name=$(kubectl get node | awk {'print $1'} | head -n 4 | tail -n 1)
kubectl label nodes $node_name kubernetes.io/arch="amd64"
kubectl label nodes $node_name kubernetes.io/os=linux
## Installing heapster components on the cluster for node monitoring
git clone https://github.com/kubernetes-sigs/metrics-server.git
sed -i -e '/args:/ a\          - --kubelet-insecure-tls' metrics-server/deploy/kubernetes/metrics-server-deployment.yaml
kubectl apply -f  metrics-server/deploy/kubernetes/
sleep 300
kubectl top nodes

testResult="Pass"

##OpneEBS install for dmass gui testing
# fetch openebs operator yaml
openebs_operator=openebs-operator-1.4.0.yaml 
wget https://openebs.github.io/charts/$openebs_operator
# set fields required for sparse pool setup
default_pool_line=$(cat $openebs_operator | grep -n  OPENEBS_IO_INSTALL_DEFAULT_CSTOR_SPARSE_POOL | tail -n +2 | awk -F':' '{print $1}')
value_line_pool=$(( default_pool_line + 1 ))
sed -i "${value_line_pool}s/.*/          value: \"true\"/" $openebs_operator
sparse_line=$(cat $openebs_operator | grep -n  SPARSE_FILE_COUNT | awk -F':' '{print $1}')
value_line_count=$(( sparse_line + 1 ))
sed -i "${value_line_count}s/.*/          value: \"1\"/" $openebs_operator
# deploy openebs operator 
kubectl apply -f $openebs_operator
sleep 100
kubectl get pods -n openebs
# Deploy application
app="mongo"
wget https://raw.githubusercontent.com/mayadata-io/litmus/master/apps/mongodb/deployers/run_litmus_test.yml
sed -i 's/value: openebs-mongodb/value: openebs-cstor-sparse/g' run_litmus_test.yml
sed -i -e 's/generateName: litmus-mongodb-/generateName: litmus-mongodb-deploy/g' run_litmus_test.yml
cat run_litmus_test.yml
kubectl create -f run_litmus_test.yml
test_name=litmus-mongodb-deploy
litmus_pod=$(kubectl get po -n litmus | grep $test_name | awk {'print $1'} | tail -n 1)
echo $litmus_pod
job_status=$(kubectl get po  $litmus_pod -n litmus | awk {'print $3'} | tail -n 1)
while [[ "$job_status" != "Completed" ]]
do 
    job_status=$(kubectl get po  $litmus_pod -n litmus | awk {'print $3'} | tail -n 1)
    sleep 6
done
kubectl logs -f $litmus_pod -n litmus
app_ns=$(kubectl get ns | grep $app | awk '{print $1}')
echo $app_ns
kubectl get pods -n $app_ns

## Clone oep-e2e repository for updating readme with the result

git clone https://github.com/mayadata-io/oep-e2e.git

if [[ $branch_name == "master" ]]; then
   python3 oep-e2e/utils/result_update.py --job_id "$job_id" --stage "$stage" --test_desc "$test_desc" --test_result "$testResult" --time_stamp "$current_time" --token "$gittoken" --test_name "$test_name" --job_name "$test_name" --platform "GCP"
fi